generator client {
  provider = "prisma-client-js"
  previewFeatures = ["mongodb"]
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String     @unique
  emailVerified DateTime?
  password      String
  image         String?
  phone         String?
  studentId     String?    @unique
  bio           String?
  title         String?
  role          Role       @default(USER)
  status        Status     @default(ACTIVE)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Relations
  providedServices Service[]       @relation("ServiceProvider")
  bookingsAsCustomer Booking[]     @relation("BookingCustomer")
  bookingsAsProvider Booking[]     @relation("BookingProvider")
  reviewsGiven      Review[]       @relation("ReviewGiven")
  reviewsReceived   Review[]       @relation("ReviewReceived")
  sentMessages      Message[]      @relation("MessageSent")
  receivedMessages  Message[]      @relation("MessageReceived")
  skills            UserSkill[]
  education         Education[]
  certification     Certification[]
  transactions      Transaction[]

  @@map("users")
}

model UserSkill {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  skill     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("user_skills")
}

model Education {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  institution String
  degree      String
  fieldOfStudy String
  startDate   DateTime
  endDate     DateTime?
  current     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("education")
}

model Certification {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  name         String
  organization String
  issueDate    DateTime
  expiryDate   DateTime?
  credentialId String?
  credentialUrl String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("certifications")
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  icon        String?
  slug        String    @unique
  count       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  services    Service[]

  @@map("categories")
}

model Service {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  price       Float
  priceType   String?
  location    String
  image       String?
  featured    Boolean   @default(false)
  discount    Int?
  availability String?
  deliveryTime String?
  status      Status    @default(ACTIVE)
  providerId  String    @db.ObjectId
  categoryId  String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  provider    User      @relation("ServiceProvider", fields: [providerId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])
  bookings    Booking[]
  reviews     Review[]
  features    ServiceFeature[]

  @@map("services")
}

model ServiceFeature {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  serviceId String   @db.ObjectId
  feature   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  service   Service  @relation(fields: [serviceId], references: [id])

  @@map("service_features")
}

model Booking {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  customerId  String        @db.ObjectId
  providerId  String        @db.ObjectId
  serviceId   String        @db.ObjectId
  date        DateTime
  startTime   DateTime?
  endTime     DateTime?
  status      BookingStatus @default(PENDING)
  totalAmount Float
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  customer    User          @relation("BookingCustomer", fields: [customerId], references: [id])
  provider    User          @relation("BookingProvider", fields: [providerId], references: [id])
  service     Service       @relation(fields: [serviceId], references: [id])
  review      Review?
  transaction Transaction?

  @@map("bookings")
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  rating      Int
  comment     String?
  reviewerId  String   @db.ObjectId
  revieweeId  String   @db.ObjectId
  serviceId   String   @db.ObjectId
  bookingId   String   @unique @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reviewer    User     @relation("ReviewGiven", fields: [reviewerId], references: [id])
  reviewee    User     @relation("ReviewReceived", fields: [revieweeId], references: [id])
  service     Service  @relation(fields: [serviceId], references: [id])
  booking     Booking  @relation(fields: [bookingId], references: [id])

  @@map("reviews")
}

model Message {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  senderId    String   @db.ObjectId
  recipientId String   @db.ObjectId
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sender      User     @relation("MessageSent", fields: [senderId], references: [id])
  recipient   User     @relation("MessageReceived", fields: [recipientId], references: [id])

  @@map("messages")
}

model Transaction {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float
  currency    String           @default("KES")
  status      TransactionStatus @default(PENDING)
  paymentMethod String
  paymentId   String?
  userId      String           @db.ObjectId
  bookingId   String?          @unique @db.ObjectId
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  user        User             @relation(fields: [userId], references: [id])
  booking     Booking?         @relation(fields: [bookingId], references: [id])

  @@map("transactions")
}

model Discussion {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  authorId    String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  comments    Comment[]

  @@map("discussions")
}

model Comment {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  content      String
  authorId     String   @db.ObjectId
  discussionId String   @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  discussion   Discussion @relation(fields: [discussionId], references: [id])

  @@map("comments")
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  location    String
  startDate   DateTime
  endDate     DateTime
  image       String?
  organizerId String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("events")
}

enum Role {
  USER
  PROVIDER
  ADMIN
}

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}